"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const magic_string_1 = __importDefault(require("magic-string"));
const rollup_1 = __importDefault(require("rollup"));
const plugin_node_resolve_1 = __importDefault(require("@rollup/plugin-node-resolve"));
const plugin_babel_1 = __importDefault(require("@rollup/plugin-babel"));
const fs = __importStar(require("fs"));
const plugin_json_1 = __importDefault(require("@rollup/plugin-json"));
function loadJsxTsxFilesRecursivelyFromDir(dir, subDir = "", names = []) {
    let included = "";
    function cPath(...paths) { return paths.join("/").replace(/\/+/g, "/"); }
    fs.readdirSync(cPath(dir, subDir)).forEach((file) => {
        //load sub files if directory
        if (fs.lstatSync(cPath(dir, subDir, file)).isDirectory()) {
            const [i, n] = loadJsxTsxFilesRecursivelyFromDir(dir, subDir + file + "/", names);
            included += i;
            names.push(...n);
        }
        else if (file.endsWith(".jsx") || file.endsWith(".tsx")) {
            const name = file.split(".")[0];
            names.push(name);
            included += "import " + name + " from '" + cPath("./components/", subDir, file) + "';\n";
        }
    });
    return [included, names];
}
/**
 * This plugin is used to compile server side components using solid-js library, because of certains environments for
 * ssr are limited, and cannot use import, and require statements, this plugin is used to include all the files
 * in the server side code, and compile them to js using solid-js library and typescript.
 * @param {string} filePath - path to the server side file, that will be used as the entry point for the server side code
 * @param {string} outputFilePath - path to the output file, where the server side code will be written
 * @param {string} componentsPath - path to the components directory, will be used to include all the jsx and tsx files recursively
 */
function default_1(filePath, outputFilePath, componentsPath) {
    let compiling = false;
    let commandUsed = null;
    let cache = undefined;
    const rollupConfig = {
        input: filePath, output: { file: outputFilePath, compact: true, format: "cjs" },
        plugins: [
            // import all jsx and tsx files from the components directory to have them available in the server side code
            { name: "concat-jsx-files-to-file", async transform(code, id) {
                    if (!id.includes(filePath))
                        return;
                    let [included, names] = loadJsxTsxFilesRecursivelyFromDir(componentsPath);
                    const s = new magic_string_1.default(code).prepend(included).prepend(`const comps = {${names.join(",")}};\n`);
                    return { code: s.toString(), moduleSideEffects: 'no-treeshake', map: s.generateMap() };
                } },
            // add renderComponent function
            { name: "add-render-component", async transform(code, id) {
                    if (!id.includes(filePath))
                        return;
                    const s = new magic_string_1.default(code).append(`
          import {renderToString} from "solid-js/web";

          //@ts-ignore renderComponent will be defined used only in server, no need to type it
          globalThis.renderComponent = (name: string, props: any) => {
            //@ts-ignore comps var generated by vite_ssr_bundle.ts
            const component = comps[name] as any;
            return renderToString(() => component(props));
          };
        `);
                    return { code: s.toString(), moduleSideEffects: 'no-treeshake', map: s.generateMap() };
                } },
            // used to resolve node_modules, and include dependencies in the server side code, slowest part of the build
            (0, plugin_node_resolve_1.default)({ browser: false, preferBuiltins: true, extensions: [".js", ".jsx", ".ts", ".tsx"] }),
            // compile ts and tsx files to js using solid-js library
            (0, plugin_babel_1.default)({ sourceMaps: false, extensions: [".ts", ".tsx"], skipPreflightCheck: true,
                babelHelpers: "bundled", minified: true, targets: { node: "current" },
                // replace solid-js/web with solid-js/web/dist/server.js to force having the server side version of the library
                plugins: [["babel-plugin-module-resolver", { "alias": { "solid-js/web": "solid-js/web/dist/server.js" } }]],
                // use of typescript to transpile js and solid-js library to transpile the jsx
                presets: [["@babel/preset-typescript"], ["solid", { generate: "ssr", hydratable: false }]]
            }),
            // include json files in the server side code, for translations or other data
            (0, plugin_json_1.default)()
        ]
    };
    async function compile() {
        if (compiling)
            return;
        compiling = true;
        console.log("[Vite Plugin SSR] Compiling server side components...");
        try {
            const res = await rollup_1.default.rollup({ ...rollupConfig, cache: cache ?? true });
            await res.write(rollupConfig.output);
            cache = res.cache;
            await res.close().then(() => compiling = false);
            console.log("[Vite Plugin SSR] Done compiling server side components");
        }
        catch (e) {
            console.error("[Vite Plugin SSR] Error:", e);
        }
    }
    // noinspection JSUnusedGlobalSymbols - vite hook
    return {
        name: 'vite_compile_serverside_components',
        enforce: 'pre',
        config(config) {
            var _a, _b;
            const i = ((_b = ((_a = (config.build || (config.build = {}))).rollupOptions || (_a.rollupOptions = {}))).input || (_b.input = {}));
            if (typeof i === "string")
                config.build.rollupOptions.input = { [i]: __dirname + "/" + i };
            else if (typeof i === "object") {
                if (Array.isArray(i))
                    config.build.rollupOptions.input = i.reduce((acc, v) => { acc[v] = __dirname + "/" + v; return acc; }, {});
            }
            config.build.rollupOptions.input[filePath] = __dirname + "/" + filePath;
            return config;
        },
        async buildStart() {
            if (commandUsed === "build")
                await compile();
            else
                compile().then(); // don't wait for it
        },
        async handleHotUpdate({ file, server }) {
            if (file.includes(filePath) || file.endsWith(".tsx") || file.endsWith(".jsx") || cache?.modules.map(m => m.id).includes(file)) {
                await compile();
                // wait some time to let the file system catch up
                await (() => new Promise(resolve => setTimeout(resolve, 100)))();
            }
            if (file.includes(filePath) || file.includes(outputFilePath))
                return [];
        }
    };
}
exports.default = default_1;
